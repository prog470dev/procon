勝敗関連
----------------------------------------------


## 索引
・後ろから探索する
  「負け状態」で手番を持つと負け
  「負け状態」に遷移できる状態は「勝ち状態」
・Grundy数を求める
・adhocな必勝法を見つける

## 点差がつくゲーム
　相手が点数を最大化しようとした時の点数を最小化する（ミニマックス法）
 メモ化再帰

## Nim

### Nimが使える条件（書き方1）
- 二人、有限、確定完全情報、
- 「normal play condition」(動きができない時、かつその時に限り負ける)
- 「impartial game(公平ゲーム)」(二人のプレイヤーは、同じ状態なら同じ動きをすることができ、プレイヤーの違いは単にどちらが先に動かすかということの違いだけ)
のゲームを考える。

### Nimが使える条件（書き方2）
- 2人で行う
- 完全に情報が分かる（トランプで相手の手札が見えない、とかそういう分からない情報がない）
- 出力は勝つか負けるかのどちらかのみ

### Nim
山の個数がn1, n2, ..., nkの時、n1 xor n2 xor ... xor nkが
== 0 : 先攻の負け（その状態を動かすプレイヤーの負け）
!= 0 : 先攻の勝ち
プログラム的には
int x = 0;
rep(i, 0, k) x ^= n[i];
if(x == 0)
	???
else
	???

### Grundy数の例
int grundyNumber(position pos){
  nextPos[] next = { posから遷移できる全ての座標 };
  set<integer> s; // 集合を用意します
  for(position x : next)
    s.add( grundyNumber(x) ); //遷移先のgrundy numberを集合に追加します
  //集合sに含まれない非負の整数の中で最小値を、このposのgrundy numberとします
  int res = 0;
  while( s.contains(res) ) res++;
  return res;
}
