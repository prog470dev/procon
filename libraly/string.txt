string
----------------------------------------------

## 部分文字列
### 先頭a文字とそれ以外に分ける場合
A = str.substr(0, a);
B = str.substr(a);



## 検索
find()・・・指定した文字列が、最初に現れる位置を返す
無ければ、string::npos = -1


## 置換
string replace(string src, string from, string to)
{
	string::size_type Pos(src.find(from));
	while (Pos != string::npos)
	{
		src.replace(Pos, from.length(), to);
		Pos = src.find(from, Pos + to.length());
	}
	return src;
}



## 実数を桁数指定をしてstringにする
string double_to_string(double f, int d)
{
	ostringstream oss;
	oss << setprecision(d) << setiosflags(ios::fixed) << f;
	return oss.str();
}



## 反転
reverse(ss.begin(), ss.end());


## split
// from http://d.hatena.ne.jp/sun-rise/20091010/1255136275
vector<string> split(string str, string delim) { // strをdelimそれぞれで分割
	vector<string> items;
	size_t dlm_idx;
	if (str.npos == (dlm_idx = str.find_first_of(delim))) {
		items.push_back(str.substr(0, dlm_idx));
	}
	while (str.npos != (dlm_idx = str.find_first_of(delim))) {
		if (str.npos == str.find_first_not_of(delim)) {
			break;
		}
		items.push_back(str.substr(0, dlm_idx));
		dlm_idx++;
		str = str.erase(0, dlm_idx);
		if (str.npos == str.find_first_of(delim) && "" != str) {
			items.push_back(str);
			break;
		}
	}
	return items;
}



## 文字列をインクリメントする "a" -> "b" -> ... -> "z" -> "aa" -> "ab"
#define rrep(i,a,b) for(int i=a;i>=b;i--)
string nxt(string x) {
	int carry = 1;
	rrep(i, x.length() - 1, 0) {
		int n = x[i] - 'a' + carry;
		carry = 0;
		if (26 <= n) {
			n %= 26;
			carry = 1;
		}
		x[i] = 'a' + n;
	}
	if (carry) x = "a" + x;
	return x;
}
