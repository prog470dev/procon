/*
文字列→数値
数値→文字列
一行読み込む
切り上げ
四捨五入
最大公約数(約分)
最小公倍数
通分
割り算の比較
重複する要素の消去
lowerbound
upperbound
binary_search
next_permutation
prev_permutation


*/


------------------------------
//文字→数値
//(c → num)

ll num = c - '0';

------------------------------
//文字列→数値
//(str → num)

ll num=0;
REP(i,0,str.size()){
	num *= 10;
	num += (str[i] - '0');
}


//i文字目から一文字づつ読む
int num = 0;
while( isdigit( s[i]) ) {
    num = 10*num + ( s[i++] - '0' );
}

------------------------------
//数値→文字列
//(num → str)

string str=to_string(num);

------------------------------
//一行読み込み
// cinは改行コードは無視されるので
// n　(行数)
// "abc" <スペース>　"def"
// ...
// の時は困る.そのため, cin.ignore()を使う
int n, string s;
cin >> n;
cin.ignore(); // 次の改行文字まで(改行文字を含めて)最大1文字読み捨てる。
              // 1文字だと駄目な場合は cin.ignore(/*読み飛ばしたい最大文字数*/); とすれば良い。
getline(cin, s);

------------------------------
//切り上げ a/m
a = (a + m - 1)/m;

//四捨五入
a = (double) a / m + 0.5;
------------------------------
//最大公約数( a/b の約分を求める)

// a, bは共に非負整数
// a%bとa-bは同じになる
ll gcd(ll a, ll b) {
	if (b == 0) return a;
	return gcd(b, a%b);
}

//gcc拡張を使う
ll gcd = __gcd(a,b);

//性質
gcd(a, b) = gcd(b, a-b)  //差への還元
gcd(a, b) = gcd(b, a%b)  //剰余への還元(b!=0)

//図形的意味
gcd:ある長方形に正方形を敷き詰める(図形の中に図形を敷き詰める)とき
lcm:長方形を並べて正方形を作る(外側に敷き詰める)とき

------------------------------
//最小公倍数

ll lcm = a/__gcd(a,b)*b;

------------------------------
//通分
//(a/b + c/d)

ll gcd = __gcd(b,d);
ll lcm = b / gcd * d;
ll bunshi = a * d / gcd + c * b / gcd;
ll bunbo = lcm;
double tubun = bunshi/bunbo;

// 通分のあと約分された形にしたい

ll gcd2= __gcd(bunshi,bunbo);
bunshi /= gcd2;
bunbo = bunbo / gcd2;

------------------------------
// 割り算の比較
// a/b == c/dは小数の誤差が出るため以下を使う
a*d == b*c

------------------------------
// 重複する要素の削除
// 要素が多い時はsetにいれてfindするより高速
sort(v.begin(), v.end());
v.erase( unique(v.begin(), v.end()), v.end() );

------------------------------
//底の変換公式
//log(a, b) = log(x, b) / log(x, a)
//xは何でもよい
//log(底, 基数)
//Mathライブラリには底がe, 2, 10の時しかない


------------------------------
//lower_bound,upper_bound
//lower_boundは a <= k となる k
//upper_boundは a < k となる k
//aが最大値を超えていたら0を返すので注意
//返り値はイテレータ

sort(vt.begin(),vt.end());//忘れずに
ll lb = *lower_bound(vt.begin(),vt.end(),a);
ll ub = *upper_bound(vt.begin(),vt.end(),a);

//binary_search
//aがあるか検索。返り値はbool型
bool exist = binary_search(vt.begin(),vt.end(),a);

------------------------------
//next_permutation, prev_permutation
//全ての組み合わせを列挙
//sortが必要らしい
vector<int> v;
sort(v.begin(), v.end());
do{
	//処理
}while(next_permutation(v.begin(), v.end()));

//逆順なら
sort(v.begin(), v.end());
do{
	//処理
}while(prev_permutation(v.begin(), v.end()));

------------------------------
